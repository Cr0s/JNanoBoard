/*
 The MIT License (MIT)

 Copyright (c) 2014 Cr0s

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
package cr0s.nanoboard.main;

import cr0s.nanoboard.nanopost.NanoPost;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.UIManager;

/**
 * NanoPost rendering panel. Renders NanoPost content as tree item
 * @author user
 */
public class NanoPostPanel extends javax.swing.JPanel {

    private NanoPost np;
    private NBFrame nbf;

    /**
     * Creates new form NanoPostPanel
     */
    public NanoPostPanel(NanoPost np, NBFrame nbf) {
        this.np = np;
        this.nbf = nbf;

        initComponents();

        this.panPostText.setText(np.getPostText());
        this.lblPostHeader.setText(np.toString());

        if (np.getAttach() != null) {
            if (np.getAttach().isImage()) {
                drawAttachImage();
            }
        } else {
            drawNanopostImage();
            //panAttach.setVisible(false);
        }
    }

    private void drawAttachImage() {
        try {
            BufferedImage image = ImageIO.read(np.getAttach().getLocalFile());
            if (image != null) {
                if (image.getWidth() > 157 || image.getHeight() > 200) {
                    image = resize(image, 157, 200);
                }

                lblImg.setIcon(new ImageIcon(image));
                lblImg.repaint();
            }

        } catch (IOException ex) {
            Logger.getLogger(NanoPostPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void drawNanopostImage() {
        try {
            File imgFile = np.getNanoPostFile();
            if (!imgFile.exists()) {
                panAttach.setVisible(false);
                return;
            }

            BufferedImage image = ImageIO.read(imgFile);
            if (image != null) {
                if (image.getWidth() > 157 || image.getHeight() > 200) {
                    image = resize(image, 157, 200);
                }

                lblImg.setIcon(new ImageIcon(image));
                lblImg.repaint();
            }

        } catch (IOException ex) {
            Logger.getLogger(NanoPostPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panAttach = new javax.swing.JPanel();
        lblImg = new javax.swing.JLabel();
        panPostHeader = new javax.swing.JPanel();
        lblPostHeader = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panPostText = new javax.swing.JEditorPane();

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        panAttach.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout panAttachLayout = new javax.swing.GroupLayout(panAttach);
        panAttach.setLayout(panAttachLayout);
        panAttachLayout.setHorizontalGroup(
            panAttachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImg, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
        );
        panAttachLayout.setVerticalGroup(
            panAttachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        panPostHeader.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblPostHeader.setText(" ");

        javax.swing.GroupLayout panPostHeaderLayout = new javax.swing.GroupLayout(panPostHeader);
        panPostHeader.setLayout(panPostHeaderLayout);
        panPostHeaderLayout.setHorizontalGroup(
            panPostHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblPostHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panPostHeaderLayout.setVerticalGroup(
            panPostHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblPostHeader)
        );

        panPostText.setEditable(false);
        panPostText.setBackground(new java.awt.Color(240, 240, 240));
        panPostText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jScrollPane2.setViewportView(panPostText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panPostHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panAttach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 2, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(panPostHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panAttach, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblImg;
    private javax.swing.JLabel lblPostHeader;
    private javax.swing.JPanel panAttach;
    private javax.swing.JPanel panPostHeader;
    private javax.swing.JEditorPane panPostText;
    // End of variables declaration//GEN-END:variables

    void setSelected(boolean selected) {
        if (selected) {
            this.setBorder(BorderFactory.createLineBorder(Color.ORANGE, 2, true));
        } else {
            this.setBorder(BorderFactory.createLineBorder(UIManager.getColor("Tree.textBackground"), 2, true));
        }
    }
}
